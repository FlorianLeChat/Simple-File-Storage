%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2400 1722
%%HiResBoundingBox: 0 0 2400 1721.0399
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2400 1721.0399 re
W
q
[0.24 0 0 -0.24 0 1721.0399] cm
q
0 0 10000 7168.75 re
W*
q
[31.249821 0 0 31.246414 3281.26 -31.246414] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
85.249496 11 m
16.007835 11 l
13.244525 11 11 13.242085 11 16.007835 c
11 94.992165 l
11 97.755478 13.242085 100 16.007835 100 c
94.992165 100 l
97.755478 100 100 97.757919 100 94.992165 c
100 43.126106 l
99.777344 43.546875 l
75.506836 11 l
85.249496 11 l
h
26 21.996048 m
26 19.236807 28.234221 17 30.999393 17 c
67.00061 17 l
69.761696 17 72 19.242651 72 21.996048 c
72 47.003952 l
72 49.763191 69.765778 52 67.00061 52 c
30.999393 52 l
28.238304 52 26 49.757351 26 47.003952 c
26 21.996048 l
h
55 23.00733 m
55 21.898712 55.893543 21 57.002762 21 c
65.997238 21 l
67.103333 21 68 21.898338 68 23.00733 c
68 45.992668 l
68 47.101288 67.106461 48 65.997238 48 c
57.002762 48 l
55.896667 48 55 47.101662 55 45.992668 c
55 23.00733 l
h
f*
Q
q
[85.102997 0 0 85.093719 286.99609 3204.3574] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0.3 18.82 m
0.34 18.379999 0.476667 17.940001 0.71 17.5 c
0.943333 17.059999 1.22 16.700001 1.54 16.42 c
2.966667 17.286667 4.32 17.719999 5.6 17.719999 c
6.16 17.719999 6.57 17.593332 6.83 17.34 c
7.09 17.086668 7.22 16.773334 7.22 16.4 c
7.22 15.773333 6.8 15.28 5.96 14.92 c
3.6 13.92 l
2.68 13.506667 1.973333 13.01 1.48 12.43 c
0.986667 11.85 0.74 11.113334 0.74 10.22 c
0.74 9.606667 0.863333 9.046667 1.11 8.54 c
1.356667 8.033333 1.703333 7.593333 2.15 7.22 c
2.596667 6.846666 3.126667 6.556666 3.74 6.35 c
4.353334 6.143333 5.033334 6.04 5.78 6.04 c
7.273334 6.04 8.780001 6.42 10.3 7.18 c
10.233334 8.206666 9.873333 9.006666 9.22 9.58 c
7.86 8.926667 6.66 8.6 5.62 8.6 c
5.086667 8.6 4.686667 8.72 4.42 8.96 c
4.153333 9.2 4.02 9.473333 4.02 9.78 c
4.02 10.299999 4.413333 10.719999 5.2 11.04 c
7.6 12.06 l
8.613333 12.486667 9.37 13.033333 9.87 13.7 c
10.37 14.366667 10.62 15.14 10.62 16.02 c
10.62 16.646668 10.506666 17.220001 10.28 17.74 c
10.053333 18.259998 9.716666 18.709999 9.27 19.09 c
8.823333 19.470001 8.266666 19.766668 7.599999 19.98 c
6.933333 20.193331 6.153333 20.299997 5.259999 20.299999 c
3.526666 20.299999 1.873333 19.806665 0.299999 18.82 c
0.3 18.82 l
h
12.7 20 m
12.7 6.34 l
13.113333 6.26 13.646667 6.22 14.3 6.22 c
14.953334 6.22 15.493334 6.26 15.92 6.34 c
15.92 20 l
15.493333 20.08 14.953333 20.120001 14.3 20.120001 c
13.646668 20.120001 13.113334 20.08 12.7 20 c
h
18.58 19.959999 m
19.639999 6.359999 l
20.226665 6.253332 20.919998 6.199999 21.719999 6.199999 c
22.52 6.199999 23.219999 6.253332 23.82 6.359999 c
25 11.259998 l
25.466667 13.473332 25.713333 14.679998 25.74 14.879998 c
25.879999 14.879998 l
25.933332 14.546665 26.179998 13.339998 26.619999 11.259998 c
27.82 6.359998 l
28.406666 6.253332 29.099998 6.199998 29.9 6.199998 c
30.700001 6.199998 31.4 6.253332 32 6.359998 c
33.060001 19.959999 l
32.646667 20.066666 32.136669 20.119999 31.530001 20.119999 c
30.923332 20.119999 30.426666 20.086666 30.040001 20.019999 c
29.720001 14.459999 l
29.626669 12.246666 29.573336 10.706666 29.560001 9.839999 c
29.440001 9.839999 l
27.460001 17.98 l
26.980001 18.059999 26.430002 18.1 25.810001 18.1 c
25.190001 18.1 24.640001 18.059999 24.160002 17.98 c
22.200001 9.839999 l
22.060001 9.839999 l
22.060001 11.026666 22.006668 12.566666 21.900002 14.459999 c
21.600002 20.019999 l
21.213335 20.086666 20.716669 20.119999 20.110003 20.119999 c
19.503336 20.119999 18.993336 20.066666 18.580002 19.959999 c
18.58 19.959999 l
h
40.439999 15.72 m
38.860001 15.72 l
38.860001 20 l
38.433334 20.08 37.900002 20.120001 37.260002 20.120001 c
36.60667 20.120001 36.073338 20.08 35.660004 20 c
35.660004 6.44 l
35.800003 6.3 l
36.960003 6.273333 37.923336 6.253333 38.690002 6.24 c
39.456669 6.226667 40.040001 6.22 40.440002 6.22 c
41.173336 6.22 41.843334 6.32 42.450001 6.52 c
43.056667 6.72 43.573334 7.02 44 7.42 c
44.426666 7.82 44.756668 8.316667 44.990002 8.91 c
45.223335 9.503333 45.340004 10.186667 45.34 10.96 c
45.339996 11.733334 45.219997 12.416667 44.98 13.01 c
44.740002 13.603334 44.40667 14.099999 43.98 14.5 c
43.553329 14.900001 43.036663 15.203334 42.43 15.41 c
41.823338 15.616666 41.160004 15.719999 40.439999 15.72 c
h
38.860001 8.66 m
38.860001 13.32 l
39.233334 13.306666 39.530003 13.296666 39.75 13.29 c
39.969997 13.283334 40.113331 13.280001 40.18 13.28 c
40.540001 13.28 40.84 13.216666 41.080002 13.09 c
41.320004 12.963334 41.513336 12.796667 41.660004 12.59 c
41.806671 12.383333 41.913338 12.14 41.980003 11.860001 c
42.046669 11.580001 42.080002 11.286668 42.080002 10.980001 c
42.080002 10.686667 42.046669 10.400001 41.980003 10.120001 c
41.913338 9.840001 41.810005 9.593334 41.670002 9.380001 c
41.529999 9.166668 41.346668 8.996668 41.120003 8.870001 c
40.893337 8.743334 40.626671 8.68 40.320004 8.680001 c
39.500004 8.680001 l
39.500004 8.680001 39.286671 8.673334 38.860004 8.660001 c
38.860001 8.66 l
h
52.5 17.299999 m
55.959999 17.299999 l
55.959999 17.833332 55.926666 18.289999 55.860001 18.67 c
55.793335 19.050001 55.580002 19.376667 55.220001 19.65 c
54.860001 19.923332 54.386669 20.059998 53.800003 20.059999 c
49.280003 20.059999 l
48.706669 20.059999 48.253334 19.893333 47.920002 19.559999 c
47.58667 19.226665 47.420002 18.773333 47.420002 18.199999 c
47.420002 6.339999 l
47.560001 6.199999 l
48.740002 6.199999 l
49.993336 6.199999 50.620003 6.879999 50.620003 8.24 c
50.620003 17.380001 l
51.206669 17.326668 51.833336 17.300001 52.500004 17.300001 c
52.5 17.299999 l
h
61.02 15.96 m
61 17.4 l
61 17.42 l
61.613331 17.393333 62.106667 17.379999 62.48 17.379999 c
67.120003 17.379999 l
67.120003 17.873333 67.100006 18.253332 67.060005 18.519999 c
66.900009 19.546665 66.220009 20.059998 65.020004 20.059998 c
59.700005 20.059998 l
59.126671 20.059998 58.67667 19.893332 58.350006 19.559998 c
58.023342 19.226664 57.860008 18.773331 57.860004 18.199997 c
57.860004 6.479997 l
58.000004 6.339997 l
66.620003 6.339997 l
66.700005 6.726664 66.740005 7.146663 66.740005 7.599997 c
66.740005 8.05333 66.646675 8.526664 66.460007 9.019997 c
61.000008 9.019997 l
61.020008 10.459997 l
61.020008 11.859997 l
61.366676 11.846664 61.820007 11.839996 62.380009 11.839996 c
65.44001 11.839996 l
65.560013 12.21333 65.62001 12.639997 65.62001 13.119996 c
65.62001 13.599996 65.560013 14.039995 65.44001 14.439996 c
61.020012 14.439996 l
61.020012 15.959995 l
61.02 15.96 l
h
76.919998 9.06 m
76.939995 10.620001 l
76.939995 11.880001 l
81.219994 11.880001 l
81.32666 12.280002 81.379997 12.716668 81.379997 13.190001 c
81.379997 13.663333 81.32666 14.099999 81.219994 14.5 c
76.939995 14.5 l
76.939995 20 l
76.513329 20.08 75.979996 20.120001 75.339996 20.120001 c
74.699997 20.120001 74.166664 20.08 73.739998 20 c
73.739998 6.46 l
73.879997 6.34 l
82.439995 6.34 l
82.519997 6.673334 82.559998 7.09 82.559998 7.59 c
82.559998 8.09 82.423332 8.46 82.149994 8.7 c
81.876656 8.94 81.446655 9.06 80.859993 9.06 c
76.919991 9.06 l
76.919998 9.06 l
h
84.480003 20 m
84.480003 6.34 l
84.893341 6.26 85.426674 6.22 86.080002 6.22 c
86.73333 6.22 87.273331 6.26 87.700005 6.34 c
87.700005 20 l
87.273338 20.08 86.733337 20.120001 86.080002 20.120001 c
85.426666 20.120001 84.893333 20.08 84.480003 20 c
h
95.839996 17.299999 m
99.299995 17.299999 l
99.299995 17.833332 99.266663 18.289999 99.199997 18.67 c
99.133331 19.050001 98.919998 19.376667 98.559998 19.65 c
98.199997 19.923332 97.726662 20.059998 97.139999 20.059999 c
92.620003 20.059999 l
92.046669 20.059999 91.593338 19.893333 91.260002 19.559999 c
90.926666 19.226665 90.760002 18.773333 90.760002 18.199999 c
90.760002 6.339999 l
90.900002 6.199999 l
92.080002 6.199999 l
93.333336 6.199999 93.959999 6.879999 93.959999 8.24 c
93.959999 17.380001 l
94.546661 17.326668 95.173332 17.300001 95.839996 17.300001 c
95.839996 17.299999 l
h
104.360001 15.96 m
104.340004 17.4 l
104.340004 17.42 l
104.953339 17.393333 105.446671 17.379999 105.820007 17.379999 c
110.460007 17.379999 l
110.460007 17.873333 110.44001 18.253332 110.400009 18.519999 c
110.240013 19.546665 109.560013 20.059998 108.360008 20.059998 c
103.040009 20.059998 l
102.466675 20.059998 102.016678 19.893332 101.69001 19.559998 c
101.363342 19.226664 101.200012 18.773331 101.200012 18.199997 c
101.200012 6.479997 l
101.340012 6.339997 l
109.960014 6.339997 l
110.040016 6.726664 110.080017 7.146663 110.080017 7.599997 c
110.080017 8.05333 109.986687 8.526664 109.800018 9.019997 c
104.340019 9.019997 l
104.360016 10.459997 l
104.360016 11.859997 l
104.70668 11.846664 105.160011 11.839996 105.720016 11.839996 c
108.780014 11.839996 l
108.900017 12.21333 108.960014 12.639997 108.960014 13.119996 c
108.960014 13.599996 108.900017 14.039995 108.780014 14.439996 c
104.360016 14.439996 l
104.360016 15.959995 l
104.360001 15.96 l
h
f
Q
q
[113.06012 0 0 113.047806 278.60898 4566.5889] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0.3 18.82 m
0.34 18.379999 0.476667 17.940001 0.71 17.5 c
0.943333 17.059999 1.22 16.700001 1.54 16.42 c
2.966667 17.286667 4.32 17.719999 5.6 17.719999 c
6.16 17.719999 6.57 17.593332 6.83 17.34 c
7.09 17.086668 7.22 16.773334 7.22 16.4 c
7.22 15.773333 6.8 15.28 5.96 14.92 c
3.6 13.92 l
2.68 13.506667 1.973333 13.01 1.48 12.43 c
0.986667 11.85 0.74 11.113334 0.74 10.22 c
0.74 9.606667 0.863333 9.046667 1.11 8.54 c
1.356667 8.033333 1.703333 7.593333 2.15 7.22 c
2.596667 6.846666 3.126667 6.556666 3.74 6.35 c
4.353334 6.143333 5.033334 6.04 5.78 6.04 c
7.273334 6.04 8.780001 6.42 10.3 7.18 c
10.233334 8.206666 9.873333 9.006666 9.22 9.58 c
7.86 8.926667 6.66 8.6 5.62 8.6 c
5.086667 8.6 4.686667 8.72 4.42 8.96 c
4.153333 9.2 4.02 9.473333 4.02 9.78 c
4.02 10.299999 4.413333 10.719999 5.2 11.04 c
7.6 12.06 l
8.613333 12.486667 9.37 13.033333 9.87 13.7 c
10.37 14.366667 10.62 15.14 10.62 16.02 c
10.62 16.646668 10.506666 17.220001 10.28 17.74 c
10.053333 18.259998 9.716666 18.709999 9.27 19.09 c
8.823333 19.470001 8.266666 19.766668 7.599999 19.98 c
6.933333 20.193331 6.153333 20.299997 5.259999 20.299999 c
3.526666 20.299999 1.873333 19.806665 0.299999 18.82 c
0.3 18.82 l
h
17.84 8.98 m
17.860001 10.459999 l
17.860001 20 l
17.406668 20.08 16.866667 20.120001 16.24 20.120001 c
15.613333 20.120001 15.086666 20.08 14.66 20 c
14.66 8.98 l
13.38 9 l
11.32 9 l
11.24 8.613334 11.2 8.17 11.2 7.67 c
11.2 7.17 11.24 6.726667 11.32 6.34 c
21.219999 6.34 l
21.326666 6.686667 21.379999 7.106667 21.379999 7.6 c
21.379999 8.093333 21.246666 8.45 20.98 8.67 c
20.713333 8.89 20.286667 9 19.699999 9 c
19.119999 9 l
17.859999 8.98 l
17.839998 8.98 l
17.84 8.98 l
h
25.459999 16.280001 m
25.82 17.32 26.546667 17.84 27.639999 17.84 c
28.186666 17.84 28.629999 17.703333 28.969999 17.43 c
29.309999 17.156668 29.576666 16.809999 29.769999 16.389999 c
29.963331 15.969998 30.09333 15.499999 30.159998 14.98 c
30.226665 14.46 30.259998 13.946667 30.259998 13.44 c
30.259998 12.973333 30.243332 12.453333 30.209999 11.879999 c
30.176666 11.306665 30.08 10.769999 29.919998 10.27 c
29.759996 9.770001 29.506664 9.35 29.159998 9.009999 c
28.813332 8.669998 28.306665 8.499998 27.639997 8.499999 c
26.999996 8.499999 26.509996 8.663332 26.169998 8.989999 c
25.83 9.316666 25.576666 9.719998 25.409998 10.199999 c
25.24333 10.679999 25.139997 11.189999 25.099998 11.729999 c
25.059999 12.269999 25.040001 12.746665 25.039999 13.159999 c
25.039999 13.773333 25.07 14.319999 25.129999 14.799999 c
25.189999 15.28 25.299999 15.773333 25.459999 16.279999 c
25.459999 16.280001 l
h
23.84 19.040001 m
22.413334 17.853334 21.700001 15.900001 21.700001 13.18 c
21.700001 12.006667 21.836668 10.976667 22.110001 10.09 c
22.383333 9.203334 22.776667 8.46 23.290001 7.86 c
23.803335 7.26 24.426668 6.806667 25.160002 6.5 c
25.893335 6.193333 26.720001 6.04 27.640001 6.04 c
28.560001 6.04 29.390001 6.193333 30.130001 6.5 c
30.870001 6.806667 31.496668 7.263333 32.010002 7.87 c
32.523335 8.476667 32.916668 9.223333 33.190002 10.11 c
33.463337 10.996666 33.600002 12.02 33.600002 13.179999 c
33.600002 14.339999 33.463337 15.363333 33.190002 16.25 c
32.916668 17.136667 32.523335 17.880001 32.010002 18.48 c
31.496668 19.079998 30.870003 19.533331 30.130003 19.84 c
29.390003 20.146669 28.560003 20.300001 27.640003 20.299999 c
26.120003 20.299999 24.853336 19.879999 23.840004 19.039999 c
23.84 19.040001 l
h
45.639999 10.56 m
45.639999 11 45.573334 11.416667 45.439999 11.81 c
45.306664 12.203334 45.129997 12.556667 44.91 12.870001 c
44.690002 13.183334 44.43 13.456668 44.130001 13.690001 c
43.830002 13.923333 43.52 14.1 43.200001 14.22 c
43.893333 14.473333 44.40667 15.086667 44.740002 16.06 c
45.34 17.76 l
45.566666 18.426666 45.900002 18.92 46.34 19.24 c
46.139999 19.506666 45.84 19.73 45.439999 19.91 c
45.039997 20.09 44.599998 20.18 44.119999 20.18 c
43.639999 20.18 43.266666 20.043333 43 19.77 c
42.733334 19.496668 42.486664 19.02 42.259998 18.34 c
41.539997 16.24 l
41.39333 15.839999 41.196663 15.533333 40.949997 15.32 c
40.703331 15.106667 40.333332 15 39.839996 15 c
39.019997 15 l
39.019997 20 l
38.59333 20.08 38.059998 20.120001 37.419998 20.120001 c
36.779999 20.120001 36.25333 20.08 35.839996 20 c
35.839996 6.44 l
35.979996 6.3 l
37.139996 6.273333 38.116665 6.253333 38.909996 6.24 c
39.703327 6.226667 40.32666 6.22 40.779995 6.22 c
41.513329 6.22 42.179993 6.31 42.779995 6.49 c
43.379997 6.67 43.889996 6.94 44.309994 7.3 c
44.729992 7.66 45.05666 8.113333 45.289993 8.66 c
45.523327 9.206666 45.639996 9.839999 45.639992 10.56 c
45.639999 10.56 l
h
39.02 8.62 m
39.02 12.54 l
39.620003 12.54 40.133335 12.53 40.560001 12.51 c
40.986668 12.490001 41.330002 12.410001 41.59 12.270001 c
41.849998 12.13 42.046665 11.933333 42.18 11.68 c
42.313335 11.426667 42.380001 11.06 42.380001 10.58 c
42.380001 9.286666 41.753334 8.639999 40.5 8.639999 c
39.669998 8.639999 l
39.669998 8.639999 39.453331 8.633332 39.019997 8.619999 c
39.02 8.62 l
h
51.459999 17.139999 m
51.099998 17.139999 50.833332 17.133333 50.66 17.119999 c
49.799999 20.019999 l
49.48 20.099998 49.033333 20.139999 48.459999 20.139999 c
47.82 20.139999 47.299999 20.066666 46.899998 19.92 c
46.799999 19.76 l
51.200001 6.34 l
51.720001 6.26 52.326668 6.22 53.02 6.22 c
53.806667 6.22 54.433334 6.266667 54.900002 6.36 c
59.220001 19.799999 l
58.753334 20.053331 58.226665 20.179998 57.639999 20.179998 c
56.946667 20.179998 56.459999 20.059998 56.18 19.819998 c
55.900002 19.579998 55.66 19.119997 55.459999 18.439999 c
55.079998 17.119999 l
54.906666 17.133333 54.646667 17.139999 54.299999 17.139999 c
51.459999 17.139999 l
h
51.400002 14.62 m
52.200001 14.599999 l
53.66 14.599999 l
53.726665 14.599999 53.84333 14.603333 54.009998 14.61 c
54.176666 14.616667 54.299999 14.62 54.379997 14.62 c
54.039997 13.38 l
53.719997 12.26 53.353333 10.886666 52.939999 9.26 c
52.82 9.26 l
52.713333 9.833333 52.393333 11.106667 51.860001 13.08 c
51.400002 14.62 l
h
66.18 12.24 m
69.32 12.219999 l
70.733337 12.219999 71.440002 12.886666 71.440002 14.219999 c
71.440002 19.48 l
69.720001 20.026667 67.913338 20.299999 66.020004 20.299999 c
65.060005 20.299999 64.210007 20.139999 63.470005 19.82 c
62.730007 19.5 62.110008 19.040001 61.610004 18.440001 c
61.110001 17.84 60.733334 17.103334 60.480003 16.229999 c
60.226673 15.356666 60.100006 14.366665 60.100002 13.259999 c
60.100002 12.046666 60.276669 10.99 60.630001 10.089999 c
60.983334 9.189999 61.456669 8.439999 62.050003 7.839999 c
62.643337 7.239999 63.326672 6.79 64.100006 6.489999 c
64.873344 6.189999 65.680008 6.039999 66.520004 6.04 c
68.253334 6.04 69.880005 6.52 71.400002 7.48 c
71.386673 7.693333 71.33667 7.909999 71.25 8.129999 c
71.16333 8.349999 71.056664 8.563333 70.93 8.77 c
70.803337 8.976667 70.65667 9.163333 70.489998 9.33 c
70.323326 9.496667 70.153328 9.64 69.979996 9.76 c
68.873329 9.04 67.753326 8.68 66.619995 8.68 c
64.446663 8.68 63.359997 10.2 63.359997 13.24 c
63.359997 16.266666 64.473328 17.779999 66.699997 17.779999 c
67.00666 17.779999 67.303329 17.766665 67.589996 17.739998 c
67.876663 17.713331 68.159996 17.67333 68.439995 17.619997 c
68.439995 16.279997 l
68.439995 15.973331 68.443329 15.706663 68.449997 15.479997 c
68.456665 15.25333 68.466667 15.059997 68.479996 14.899997 c
67.479996 14.899997 l
66.906662 14.899997 66.509995 14.789997 66.289993 14.569997 c
66.069992 14.349997 65.959991 14.006663 65.959991 13.539997 c
65.959991 13.139997 66.033325 12.706663 66.179993 12.239997 c
66.18 12.24 l
h
77.120003 15.96 m
77.100006 17.4 l
77.100006 17.42 l
77.713341 17.393333 78.206673 17.379999 78.580009 17.379999 c
83.220009 17.379999 l
83.220009 17.873333 83.200012 18.253332 83.160011 18.519999 c
83.000015 19.546665 82.320015 20.059998 81.12001 20.059998 c
75.800011 20.059998 l
75.226677 20.059998 74.77668 19.893332 74.450012 19.559998 c
74.123344 19.226664 73.960014 18.773331 73.960014 18.199997 c
73.960014 6.479997 l
74.100014 6.339997 l
82.720016 6.339997 l
82.800018 6.726664 82.840019 7.146663 82.840019 7.599997 c
82.840019 8.05333 82.746689 8.526664 82.56002 9.019997 c
77.100021 9.019997 l
77.120018 10.459997 l
77.120018 11.859997 l
77.466682 11.846664 77.920013 11.839996 78.480019 11.839996 c
81.540016 11.839996 l
81.660019 12.21333 81.720016 12.639997 81.720016 13.119996 c
81.720016 13.599996 81.660019 14.039995 81.540016 14.439996 c
77.120018 14.439996 l
77.120018 15.959995 l
77.120003 15.96 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
